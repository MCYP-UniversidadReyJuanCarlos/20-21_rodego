package com.mcyp.tfm.domain.service;

import static java.util.Objects.isNull;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mcyp.tfm.domain.exceptions.MapperException;
import com.mcyp.tfm.domain.model.Reference;
import com.mcyp.tfm.domain.model.ScriptResponse;
import com.mcyp.tfm.domain.model.ScriptType;
import com.mcyp.tfm.domain.model.ServiceInfo;
import com.mcyp.tfm.domain.model.ServicePort;
import com.mcyp.tfm.domain.model.VulnerabilityInfo;
import com.mcyp.tfm.domain.model.nmap.Address;
import com.mcyp.tfm.domain.model.nmap.Elem;
import com.mcyp.tfm.domain.model.nmap.Host;
import com.mcyp.tfm.domain.model.nmap.KeyElem;
import com.mcyp.tfm.domain.model.nmap.OperativeSystem;
import com.mcyp.tfm.domain.model.nmap.OperativeSystemMatch;
import com.mcyp.tfm.domain.model.nmap.Port;
import com.mcyp.tfm.domain.model.nmap.Script;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class VulnerabilityService {

	@Autowired
	private NmapResultMapper nmapResultMapper;
	
	public List<ServiceInfo> getServices() throws MapperException {
		return nmapResultMapper.map("services.json").getNmapRun().getHost().stream()
			.filter(host -> host.getStatus().getState().equals("up"))
			.map(host -> this.createService(host))
			.collect(Collectors.toList());
	}
	
	public List<ServiceInfo> getVulnerabilities() throws MapperException {
		return nmapResultMapper.map("vulns.json").getNmapRun().getHost().stream()
			.filter(host -> host.getStatus().getState().equals("up"))
			.map(host -> this.createService(host))
			.collect(Collectors.toList());
	}
    
	private ServiceInfo createService(Host host) {
		return new ServiceInfo()
			.setIp(getIp(host.getAddresses()))
			.setMac(getMac(host.getAddresses()))
			.setOpenPorts(getPorts(host.getPorts().getPorts()))
			.setOperativeSystem(getOperativeSystemName(host.getOperativeSystem()))
			.setVendor(getVendor(host.getAddresses()))
			.setScript(getScript(host.getPorts().getPorts()));
	}
	
	private List<ServicePort> getPorts(List<Port> ports) {
		if(isNull(ports)) {
			return null;
		}
		return ports.stream()
			.map(port -> this.createPortInfo(port))
			.collect(Collectors.toList());
	}
	
	private List<ScriptResponse> getScript(List<Port> ports) {
		if(isNull(ports)) {
			return null;
		}
		return ports.stream()
			.map(port -> this.createScriptInfo(port))
			.collect(Collectors.toList());
	}
	
	private ScriptResponse createScriptInfo(Port port) {
		log.error("portid: " + port.getPortId());
		return new ScriptResponse()
			.setScriptType(createScriptTypeList(port))
			.setVulnerabilityInfoList(createVulnerabilityInfoList(port.getScript()));
	}
	
	private List<VulnerabilityInfo> createVulnerabilityInfoList(List<Script> scripts){
		if(isNull(scripts)) {
			return null;
		}
		return scripts.stream()
			.filter(script -> script.getTable() != null)
			.map(script -> createVulnerabilityInfo(script))
			.collect(Collectors.toList());
	}
	
	private VulnerabilityInfo createVulnerabilityInfo(Script script) {
		if(isNull(script.getTable())) {
			return null;
		}
		
		List<Elem> elements = script.getTable().getElem();
		List<KeyElem> table = script.getTable().getTable();
		return new VulnerabilityInfo()
			.setCve(script.getTable().getKey())
			.setDescription(getDescription(table))
			.setDisclosure(filterElementsBy("disclosure", elements))
			.setName(filterElementsBy("title", elements))
			.setState(filterElementsBy("state", elements))
			.setReferences(getReferences(table));
	}
	
	private String filterElementsBy(String filter, List<Elem> elements){
		if(isNull(elements)) {
			return null;
		}
		return elements.stream()
			.filter(element -> element.getKey().equals(filter))
			.map(Elem::getText)
			.findFirst().orElse("");
	}
	
	private KeyElem filterKeyElem(String filter, List<KeyElem> elements) {
		return elements.stream()
			.filter(keyElement -> keyElement.getKey().equals(filter))
			.findFirst().get();
	}
	
	private String getDescription(List<KeyElem> table) {
		if(isNull(table)) {
			return null;
		}
		return filterKeyElem("description", table)
			.getElem().stream().findFirst().orElse("");
	}
	
	private Reference getReferences(List<KeyElem> table) {
		if(isNull(table)) {
			return null;
		}
		KeyElem keyElem = filterKeyElem("refs", table);
		Reference reference = new Reference();
		keyElem.getElem()
			.stream()
			.map(elem -> reference.getReferences().add(elem));
		return reference;
	}
	
	private List<ScriptType> createScriptTypeList(Port port){
		if(isNull(port.getScript())) {
			return null;
		}
		return port.getScript().stream()
			.map(script -> createScriptType(script))
			.collect(Collectors.toList());
	}
	
	private ScriptType createScriptType(Script script) {
		return new ScriptType()
			.setName(script.getId())
			.setResult(script.getOutput());
	}
	
	private ServicePort createPortInfo(Port port) {
		log.error("portid: " + port.getPortId());
		return new ServicePort()
			.setPort(port.getPortId())
			.setProtocol(port.getProtocol())
			.setService(port.getService().getName());
	}
	
	private String getOperativeSystemName(OperativeSystem operativeSystem) {
		if(isNull(operativeSystem) || isNull(operativeSystem.getOperativeSystemMatch())) {
			return "Unknown";
		}
		return operativeSystem.getOperativeSystemMatch().stream().findFirst().map(OperativeSystemMatch::getName).orElse("Unknown");
	}
    
    private String getIp(List<Address> addresses) {
    	return filterAddresses(addresses, "ipv").map(Address::getAddr).orElse("Unknown");
    }
    
    private String getMac(List<Address> addresses) {
    	return filterAddresses(addresses, "mac").map(Address::getAddr).orElse("Unknown");
    }

    private String getVendor(List<Address> addresses) {
    	return filterAddresses(addresses, "mac").map(Address::getVendor).orElse("Unknown");	
    }
    
    private Optional<Address> filterAddresses(List<Address> addresses, String filter) {
    	return addresses.stream().filter(address -> address.getAddrtype().contains(filter)).findFirst();
    }
    
}
